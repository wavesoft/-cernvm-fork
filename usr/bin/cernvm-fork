#!/bin/bash
#
# CernVM Environment Fork Utility 
# Copyright (C) 2014-2015  Ioannis Charalampidis, PH-SFT, CERN

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

# Configuration
CONFIG_RW_DIR=/mnt/.rw/containers
CONFIG_CERNVM_RO=/mnt/.ro/cvm3
CONFIG_CERNVM_PERSISTENT=/mnt/.rw/persistent
CONFIG_IP_SUFFIX=192.168.25
CONFIG_IP_GATEWAY=192.168.25.1
CONFIG_IP_BRIDGE=lxcbr0

# Show usage helper
function usage {
	echo "CernVM Environment Fork Script"
	echo "Usage:"
	echo ""
	echo " cernfm-fork <name> [-n|--new] [-c|--nonic] [-d|--daemon] [-f|--fast]"
	echo "                    [-r|--run=<script>] [-t|--tty=<number>]"
	echo "                    [-a|--admin=<username>[:<password>]]"
	echo "                    [-E|--env='variable=value'] [--ip=<address>]"
	echo "                    [--init=<script>] [--cvmfs=<repos>] [--log=<file>]"
	echo "                    [-o <lxc-option>]"
	echo " cernfm-fork <name> -C [-t|--tty=<number>]"
	echo " cernfm-fork <name> -D"
	echo ""
	echo "Options:"
	echo "  -h|--help         This help screen."
	echo "  -n|--new          Don't clone, start a new one."
	echo "  -d|--daemon       Don't attach console, deamonize."
	echo "  -c|--nonic        Don't add a network card."
	echo "  -f|--fast         Don't use system init, but a fast alternative."
	echo "  -E|--env          Define an environment variable."
	echo "  -r|--run=<script> Run the given script upon boot."
	echo "  -a|--admin=<user> Create a user with sudo privileges."
	echo "  -t|--tty=<number> The TTY to connect the console to."
	echo "  -o <lxc-config>   Additional LXC lines in the configuration script."
	echo "  --init=<script>   Custom init script to use for booting."
	echo "  --ip=<address>    The IP address of the new container."
	echo "  --log=<file>      Where to log debug information."
	echo "  --cvmfs=<repos>   CVMFS repositories to mount from host."
	echo ""
	echo "Commands:"
	echo "  -D|--destroy      Destroy the fork instance."
	echo "  -C|--console      Open a console to the given instance."
	echo ""
}

###################
### ENTRY POINT ###
###################

# Require first parameter
NAME=$1
[ "$NAME" == "-h" -o "$NAME" == "--help" ] && usage && exit 1
[ -z "$NAME" ] && echo "ERROR: Please specify an environment name! (Use --help for more info)" && exit 1
[ "${NAME:0:1}" == "-" ] && echo "ERROR: Expecting fork name as first parameter! (Use --help for more info)" && exit 1

# Require root
[ $(id -u) -ne 0 ] && echo "ERROR: Only root can use this utility!" && exit 2

# Get options from command-line
options=$(getopt -o hDCt:nfcdra:o:E: -l help,destroy,console,tty:,new,nonic,fast,daemon,admin:,cvmfs:,run:,init:,ip:,log:,env: -- "$@")
if [ $? -ne 0 ]; then
	usage
	exit 1
fi
eval set -- "$options"

# Prepare defaults
F_DAEMON=0
F_NEW=0
F_NONIC=0
F_FAST=0
RUN_SCRIPT=""
INIT_SCRIPT="/sbin/init"
CVMFS_REPOS=""
IP_ADDR=""
LOG_FILE=""
ADMIN_USER=""
ADMIN_PWD=""
COMMAND="create"
CONSOLE_TTY="1"
RAW_CONFIG=""
ENV_VARS=""

# Process options
while true
do
	case "$1" in
		-h|--help)          usage && exit 0;;
		-n|--new)           F_NEW=1; shift 1;;
		-d|--daemon)        F_DAEMON=1; shift 1;;
		-c|--nonic)         F_NONIC=1; shift 1;;
		-f|--fast)          F_FAST=1; INIT_SCRIPT="/sbin/fast-init"; shift 1;;
		-r|--run)           RUN_SCRIPT=$2; shift 2;;
		-t|--tty)			CONSOLE_TTY=$2; shift 2;;
		-E|--env)           ENV_VARS="${ENV_VARS}|$2"; shift 2;;
		-a|--admin)
			ADMIN_USER=$2
			ADMIN_PWD=$(echo "${ADMIN_USER}" | awk -F':' '{print $2}')
			if [ -z "$ADMIN_PWD" ]; then
				read -p "Password for the ${ADMIN_USER} user: " -s ADMIN_PWD
				echo ""
			else
				ADMIN_USER=$(echo "${ADMIN_USER}" | awk -F':' '{print $1}')
			fi
			shift 2;;
		-D|--destroy)		COMMAND="destroy"; shift 1;;
		-C|--console)		COMMAND="console"; shift 1;;
		-o)					RAW_CONFIG="${RAW_CONFIG}|$2"; shift 2;;
		--cvmfs)            CVMFS_REPOS="${CVMFS_REPOS} $2"; shift 2;;
		--init)             INIT_SCRIPT=$2; shift 2;;
		--ip)               IP_ADDR=$2; shift 2;;
		--log)              LOG_FILE=$2; shift 2;;
		--)                 shift 1; break ;;
		*)                  break ;;
	esac
done

# Prepare directories
PROJECT_DIR=${CONFIG_RW_DIR}/${NAME}
RW_DIR=${PROJECT_DIR}/rw
RO_DIR=${CONFIG_CERNVM_RO}
MNT_DIR=${PROJECT_DIR}/root
CONSOLE_FILE=/var/run/lxc-cvmfork-${NAME}.console

# Check the command-line to use for logging
LOG_CMDLINE=""
if [ ! -z "${LOG_FILE}" ]; then
	LOG_CMDLINE="-o ${LOG_FILE} -l trace"
	echo "------------------" >> ${LOG_FILE}
fi

# Cleanup function
function cleanup {

	# Stop container
	if [ $(lxc-ls | grep -c -E "^${NAME}$") -ne 0 ]; then
		echo "Stopping container..."
		lxc-stop --name=${NAME} ${LOG_CMDLINE} -k 2>/dev/null
	fi

	# Unmount lingering filesystems
	if [ -d ${MNT_DIR} ]; then
		echo "Unmounting filesystems..."
		LINGER=$(mount | grep "${MNT_DIR}" | awk '{print $3}')
		[ ! -z "$LINGER" ] && umount $LINGER
	fi

	# Destroy container if exists
	if [ $(lxc-ls | grep -c -E "^${NAME}$") -ne 0 ]; then
		echo "Destroying container..."
		lxc-destroy --name=${NAME} ${LOG_CMDLINE} >/dev/null
		echo "Cleaning-up config files..."
		rm -f ${LXC_CONFIG}
		rm -f ${CONSOLE_FILE}
	fi

	# Clean-up mount directory
	if [ -d ${PROJECT_DIR} ]; then
		echo "Cleaning-up scratch space..."
		rm -rf ${PROJECT_DIR}
	fi

}

# Die after error function (includes cleanup)
function die {
	echo "ERROR: $1"
	cleanup
	exit 2
}

########################
### COMMAND HANDLING ###
########################

# Check for priority commands
if [ "${COMMAND}" == "destroy" ]; then
	cleanup
	exit 0
elif [ "${COMMAND}" == "console" ]; then
	if [ $(lxc-ls | grep -c -E "^${NAME}$") -ne 0 ]; then
		echo "Connecting to container..."
		lxc-console --name=${NAME} ${LOG_CMDLINE} -t ${CONSOLE_TTY} || die "Unable to connect to the console"
	fi
	exit 0
fi

# If we already have project_dir, alert
if [ -d ${PROJECT_DIR} ]; then
   echo "ERROR: A fork with the same name already exists!"
   exit 2
fi

#######################
### NEW VM CREATION ###
#######################

# Create 'none' template for lxc utilities
if [ ! -f /usr/share/lxc/templates/lxc-none ]; then
	echo "#!/bin/bash" > /usr/share/lxc/templates/lxc-none
	chmod +x /usr/share/lxc/templates/lxc-none
fi

# Check if cgconfig and cgred daemons are running
if [ $(service cgconfig status | grep -ic 'running') -ne 1 ]; then
	service cgconfig start
	if [ $? -ne 0 ]; then
		echo "ERROR: Unable to start the cgconfig daemon!"
		exit 1
	fi
fi
if [ $(service cgred status | grep -ic 'running') -ne 1 ]; then
	service cgred start
	if [ $? -ne 0 ]; then
		echo "ERROR: Unable to start the cgred daemon!"
		exit 1
	fi
fi
if [ $(service dnsmasq status | grep -ic 'running') -ne 1 ]; then
	service dnsmasq start
	if [ $? -ne 0 ]; then
		echo "ERROR: Unable to start the dnsmasq daemon!"
		exit 1
	fi
fi

# Additional checks only if we need a network device
if [ $F_NONIC -eq 0 ]; then

	# Detect the first bridge availble
	SYS_BRIDGE_IP=""
	SYS_BRIDGE=$(brctl show | tail -n +2 | head -n 1 | awk '{print $1}')
	if [ ! -z "$SYS_BRIDGE" ]; then
		# Detect the IP address of the bridge
		SYS_BRIDGE_IP=$(ifconfig ${SYS_BRIDGE} | grep 'inet addr' | sed -r 's/.*?addr:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
	fi

	# Check if system bridge exists and if not create it
	if [ -z "${SYS_BRIDGE}" ]; then
		echo -n "Creating bridge interface ${CONFIG_IP_BRIDGE}..."
		brctl addbr ${CONFIG_IP_BRIDGE}
		if [ $? -ne 0 ]; then
			echo "ERROR: Unable to create bridge interface!"
			exit 1
		fi
		echo "ok"
	else
		CONFIG_IP_BRIDGE=${SYS_BRIDGE}
	fi

	# Check if system bridge has an IP and if not configure it
	if [ -z "${SYS_BRIDGE_IP}" ]; then
		echo -n "Configuring ${CONFIG_IP_BRIDGE}..."
		ifconfig ${CONFIG_IP_BRIDGE} ${CONFIG_IP_GATEWAY}/24
		if [ $? -ne 0 ]; then
			echo "ERROR: Unable to configure the bridge interface!"
			exit 1
		fi
		echo "ok"
	else
		# Import the IP configuration from the bridge
		CONFIG_IP_GATEWAY=${SYS_BRIDGE_IP}
		CONFIG_IP_SUFFIX=$(echo ${SYS_BRIDGE_IP} | sed -r 's/([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
	fi

	# Check for post-routing masquerade
	if [ $(iptables -n -t nat -L POSTROUTING | grep -ci MASQUERADE) -eq 0 ]; then
		echo -n "Adding required NAT rules..."
		iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
		if [ $? -ne 0 ]; then
			echo "ERROR: Unable to configure firewall!"
			exit 1
		fi
		echo "ok"
	fi

	# Check if NAT IP forwarding is enabled
	if [ $(cat /proc/sys/net/ipv4/ip_forward) -ne 1 ]; then
		echo -n "Enabling IP forwarding..."
		echo 1 > /proc/sys/net/ipv4/ip_forward
		if [ $? -ne 0 ]; then
			echo "ERROR: Unable to enable IP forwarding!"
			exit 1
		fi
		echo "ok"
	fi
	
fi

# Prepare mount point
echo -n "Preparing filesystem..."
mkdir -p ${MNT_DIR}
mkdir -p ${RW_DIR}
echo "ok"

# Clone persistent cache
if [ $F_NEW -eq 0 ]; then
   echo -n "Cloning persistent cache..."
   cp -aR ${CONFIG_CERNVM_PERSISTENT}/* ${RW_DIR}/
   echo "ok"
fi

# Mount root filesystem
echo -n "Mounting container root on ${MNT_DIR}..."
mount -t aufs -o dirs=${RW_DIR}=rw:${RO_DIR}=ro aufs-${NAME} ${MNT_DIR}
echo "ok"

# Create linux container file
LXC_CONFIG=${PROJECT_DIR}/config.lxc
cat <<EOF > $LXC_CONFIG
lxc.utsname=${NAME}
lxc.autodev=1
lxc.tty=12
lxc.kmsg=0
lxc.pts=1024
lxc.rootfs = ${MNT_DIR}
lxc.stopsignal = SIGKILL
lxc.console = ${CONSOLE_FILE}
EOF

# Check if we should not add network
if [ $F_NONIC -eq 1 ]; then
	cat <<EOF >> $LXC_CONFIG
lxc.network.type = empty
EOF
else

	# Calculate a random IP Address
	if [ -z "${IP_ADDR}" ]; then

		# Try 253 times for a unique IP
		for tries in `seq 1 253`; do

			# Calculate new IP
			IP_ADDR=${CONFIG_IP_SUFFIX}.$(shuf -i 2-254 -n 1)

			# Check if this is in use
			[ $(cat /var/lib/lxc/*/config 2>/dev/null | grep -c ${IP_ADDR}) -eq 0 ] && break
			IP_ADDR=""

		done

		# Check for errors
		if [ -z "${IP_ADDR}" ]; then
			die "ERROR: Could not find a free IP address!"
		fi

	fi
	echo "The container will have IP ${IP_ADDR}"

	# Get the default route interface
	ETH_INTERFACE=$(route | grep default | awk '{print $8}' )
	[ -z "$ETH_INTERFACE" ] && ETH_INTERFACE=eth0
	ETH_MTU=$(ifconfig ${ETH_INTERFACE} | grep MTU | sed -E 's/.*?MTU:([0-9]+).*/\1/')
	[ -z "$ETH_MTU" ] && ETH_MTU=1500

	# Create network 
	cat <<EOF >> $LXC_CONFIG
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = ${CONFIG_IP_BRIDGE}
lxc.network.ipv4 = ${IP_ADDR}
lxc.network.ipv4.gateway = ${CONFIG_IP_GATEWAY}
lxc.network.name = eth0
lxc.network.mtu = ${ETH_MTU}
EOF

	# Setup network inside the VM, using the gateway
	# IP address as the DNS server (we are running dnsmasq)
	cat <<EOF > ${MNT_DIR}/etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
BOOTPROTO=none
ONBOOT=yes
GATEWAY=${CONFIG_IP_GATEWAY}
IPADDR=${IP_ADDR}
NETMASK=255.255.255.0
DNS1=${CONFIG_IP_GATEWAY}
EOF

fi

# Mount CVMFS repositories & prepare bind-mounts
if [ ! -z "$CVMFS_REPOS" ]; then

	# If we are following system init process, disable
	# AutoFS service because it will be mounted ontop of /cvmfs
	if [ "${INIT_SCRIPT}" == "/sbin/init" ]; then
		echo -n "Disabling Autofs in the container..."
		chroot ${MNT_DIR} chkconfig autofs off
		echo "ok"
	fi

	# Premount CVMFS repositories
	echo -n "Premounting CVMFS repositories: "
	for REPOS in $CVMFS_REPOS; do
	   echo -n "${REPOS} "
	   # Let Autofs mount CVMFS repository
	   ls /cvmfs/${REPOS} 2>/dev/null >/dev/null
	   # Prepare destination inside the container
	   mkdir -p ${MNT_DIR}/cvmfs/${REPOS}
	   # Append the bind mount rule
	   echo "lxc.mount.entry = /cvmfs/${REPOS} cvmfs/${REPOS} none ro,bind,optional 0 0" >> $LXC_CONFIG
	done
	echo "ok"

fi

# Append additional config
if [ ! -z "$RAW_CONFIG" ]; then

	# Convert '|' to '\n'
	echo "$RAW_CONFIG" | tr '|' '\n' >> $LXC_CONFIG

fi

# Create fast-init script if asked to
if [ $F_FAST -eq 1 ]; then

	# Create /sbin/fast-init boot script
	cat <<EOF > ${MNT_DIR}/sbin/fast-init
#!/bin/sh
# Redirect STDOUT/STDERR on the console tty
exec 2>/dev/tty${CONSOLE_TTY} >/dev/tty${CONSOLE_TTY}

# Mount filesystems
mount -t proc proc /proc
mount -t sysfs sys /sys

# Start network
/sbin/ifup eth0

# Run application/boot code
EOF
	chmod +x ${MNT_DIR}/sbin/fast-init

	# Append environment variables if defined
	if [ ! -z "$ENV_VARS" ]; then
		(
			# Split on '|'
			IFS="|"
			# Export variables
			for VAR in ${ENV_VARS}; do
				if [ ! -z "${VAR}" ]; then
					# Append on current environment (for immediate command)
					echo "export ${VAR}" >> ${MNT_DIR}/sbin/fast-init
					# Append on the global profile (for log-in)
					echo "export ${VAR}" >> ${MNT_DIR}/etc/profile.d/cernvm-fork.sh
				fi
			done
		)
	fi

fi

# Extend rc.local with the run script
if [ ! -z "${RUN_SCRIPT}" ]; then

	# If we are using fast boot, append it on /sbin/fast-init
	TARGET_SCRIPT="${MNT_DIR}/etc/rc.local"
	[ $F_FAST -eq 1 ] && TARGET_SCRIPT="${MNT_DIR}/sbin/fast-init"

	echo -n "Adding run script..."
	# Check if this is a file inside the guest
	if [ -f "${MNT_DIR}/${RUN_SCRIPT}" ]; then
		# Append to rc.local
		echo "${RUN_SCRIPT}" >> ${TARGET_SCRIPT}
	elif [ ! -f "${RUN_SCRIPT}" ]; then
		die "The specified run script '${RUN_SCRIPT}' was not found!"
	else
		# Copy to target system
		TARGET_NAME=/tmp/postinit-$(basename ${RUN_SCRIPT})
		cp ${RUN_SCRIPT} ${MNT_DIR}/${TARGET_NAME}
		# Append to rc.local
		echo "${TARGET_NAME}" >> ${TARGET_SCRIPT}
	fi
	echo "ok"
else

	# If we are using fast boot, but no run script
	# append default agetty console
	echo "/sbin/agetty tty${CONSOLE_TTY} 9600 linux" >> ${MNT_DIR}/sbin/fast-init

fi

# Create admin accounts if requested
if [ ! -z "${ADMIN_USER}" ]; then
	echo -n "Creating admin user '${ADMIN_USER}'..."
	ADMIN_CRYPT=$(openssl passwd -crypt "${ADMIN_PWD}")
	# Create user
	chroot ${MNT_DIR} useradd -p ${ADMIN_CRYPT} -G wheel ${ADMIN_USER}
	# Make this user sudoer
	echo -e "${ADMIN_USER}\tALL=(ALL)\tALL" >> ${MNT_DIR}/etc/sudoers
	# Close
	echo "ok"
fi

# Keep system's timezone
cp -f -b /etc/localtime "${MNT_DIR}/etc/localtime"

# Append LXC_CONFIG in the logfile
if [ ! -z "${LOG_FILE}" ]; then
	cat $LXC_CONFIG >> ${LOG_FILE}
	echo "------------------" >> ${LOG_FILE}
fi

# Create a linux container
echo -n "Creating container..."
lxc-create -f ${LXC_CONFIG} ${LOG_CMDLINE} --name ${NAME} --template none || die "Unable to create the container"
echo "ok"
echo -n "Starting container..."
lxc-start -d --name ${NAME} ${LOG_CMDLINE} ${INIT_SCRIPT} || die "Unable to start the container"
echo "ok"
echo "Your CernVM fork '${NAME}' is up and running"

# If we are not daemon, open console
if [ $F_DAEMON -eq 0 ]; then
	echo "Opening console..."
	lxc-console --name ${NAME} ${LOG_CMDLINE} -t ${CONSOLE_TTY} || die "Unable to connect to the console"
	# Cleanup before exit
	cleanup
fi
